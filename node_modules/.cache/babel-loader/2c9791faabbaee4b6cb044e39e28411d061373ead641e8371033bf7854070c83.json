{"ast":null,"code":"// import React, { useReducer } from \"react\";\n// import CartContext from \"./cart_context\";\n\n// const defaultCartState = {\n//   items: [],\n//   totalAmount: 0,\n// };\n\n// const cartreducer = (state, action) => {\n//   switch (action.type) {\n//     case \"ADD\":\n//       const updatedItems=state.items.concat(action.item)\n//       const updatedTotalAmount= state.totalAmount + action.item.price*action.item.amount;\n\n//       return(\n//         {\n//           ...state,\n//         items:{updatedItems} ,\n//         totalAmount: {updatedTotalAmount},\n//         }\n//       );\n\n//       case \"REMOVE\":\n//         return state;\n\n//         default:\n//       return defaultCartState;\n//   }\n// };\n\n// const CartProvider = (props) => {\n//   const [cartState, dispatchCartAction] = useReducer(\n//     cartreducer,\n//     defaultCartState\n//   );\n\n//   const addItemToCarthandler = (item) => {\n//     dispatchCartAction({\n//       type: \"ADD\",\n//       item: item,\n//     });\n//   };\n\n//   const removeItemFromCartHandler = (id) => {\n//     dispatchCartAction({ \n//       type: \"REMOVE\", \n\n//       id: id });\n//   };\n\n//   const cartContext = {\n//     items: cartState.items,\n//     totalAmount: cartState.totalAmount, // amount as in quantity not price\n//     addItem: addItemToCarthandler,\n//     removeItem: removeItemFromCartHandler,\n//   };\n\n//   return (\n//     <CartContext.Provider value={cartContext}>\n//       {props.children}\n//     </CartContext.Provider>\n//   );\n// };\n\n// export default CartProvider;","map":{"version":3,"names":[],"sources":["/Users/prabeshparajuli/Desktop/Food_app/src/Store/CartProvider.js"],"sourcesContent":["// import React, { useReducer } from \"react\";\n// import CartContext from \"./cart_context\";\n\n// const defaultCartState = {\n//   items: [],\n//   totalAmount: 0,\n// };\n\n// const cartreducer = (state, action) => {\n//   switch (action.type) {\n//     case \"ADD\":\n//       const updatedItems=state.items.concat(action.item)\n//       const updatedTotalAmount= state.totalAmount + action.item.price*action.item.amount;\n\n//       return(\n//         {\n//           ...state,\n//         items:{updatedItems} ,\n//         totalAmount: {updatedTotalAmount},\n//         }\n//       );\n    \n    \n    \n//       case \"REMOVE\":\n//         return state;\n    \n    \n    \n//         default:\n//       return defaultCartState;\n//   }\n// };\n\n// const CartProvider = (props) => {\n//   const [cartState, dispatchCartAction] = useReducer(\n//     cartreducer,\n//     defaultCartState\n//   );\n\n//   const addItemToCarthandler = (item) => {\n//     dispatchCartAction({\n//       type: \"ADD\",\n//       item: item,\n//     });\n//   };\n\n//   const removeItemFromCartHandler = (id) => {\n//     dispatchCartAction({ \n//       type: \"REMOVE\", \n\n//       id: id });\n//   };\n\n//   const cartContext = {\n//     items: cartState.items,\n//     totalAmount: cartState.totalAmount, // amount as in quantity not price\n//     addItem: addItemToCarthandler,\n//     removeItem: removeItemFromCartHandler,\n//   };\n\n//   return (\n//     <CartContext.Provider value={cartContext}>\n//       {props.children}\n//     </CartContext.Provider>\n//   );\n// };\n\n// export default CartProvider;\n"],"mappings":"AAAA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAIA;AACA;;AAIA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA"},"metadata":{},"sourceType":"module","externalDependencies":[]}