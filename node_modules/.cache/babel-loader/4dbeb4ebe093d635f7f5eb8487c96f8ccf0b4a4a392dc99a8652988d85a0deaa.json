{"ast":null,"code":"var _jsxFileName = \"/Users/prabeshparajuli/Desktop/Food_app/src/Store/CartProvider.js\",\n  _s = $RefreshSig$();\nimport React, { useReducer } from \"react\";\nimport CartContext from \"./cart_context\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst defaultCartState = {\n  items: [],\n  totalAmount: 0\n};\n\n// const cartreducer = (state, action) => {\n//   switch (action.type) {\n//     case \"ADD\":\n//       const updatedTotalAmount =\n//         state.totalAmount + action.item.price * action.item.amount;\n//       const existingCartItemIndex = state.items.findIndex(\n//         (item) => item.id === action.item.id\n//       );\n\n//       if (existingCartItemIndex !== -1) {\n//         const existingAmount = parseInt(\n//           state.items[existingCartItemIndex].amount,\n//           10\n//         );\n//         const newAmount = parseInt(action.item.amount, 10);\n//         const updatedAmount = existingAmount + newAmount;\n\n//         // Update the item's amount with the new numeric value\n//         state.items[existingCartItemIndex].amount = updatedAmount;\n//       } else {\n//         // If it's a new item, simply add it to the items array\n//         state.items.push(action.item);\n//       }\n\n//       return {\n//         ...state,\n//         totalAmount: updatedTotalAmount,\n//       };\n\n//       case \"REMOVE\":\n//         const existingCartItemIndex = state.items.findIndex(\n//           (item) => item.id === action.id\n//         );\n\n//         if (existingCartItemIndex === -1) {\n//           return state; // No item found, nothing to remove\n//         }\n\n//         const existingItem = state.items[existingCartItemIndex];\n//         const updatedTotalAmount1 = state.totalAmount - existingItem.price;\n//         let updatedItems;\n//         if (existingItem.amount === 1) {\n//           updatedItems = state.items.filter(item => item.id !== action.id);\n//         } else {\n//           const updatedItem = { ...existingItem, amount: existingItem.amount - 1 };\n//           updatedItems = [...state.items];\n//           updatedItems[existingCartItemIndex] = updatedItem;\n//         }\n\n//         return {\n//           items: updatedItems,\n//           totalAmount: updatedTotalAmount1,\n//         };\n\n//       default:\n//         return state;\n//     }\n//   };\n\nconst CartProvider = props => {\n  _s();\n  const [cartState, dispatchCartAction] = useReducer(cartreducer, defaultCartState);\n  const addItemToCarthandler = item => {\n    dispatchCartAction({\n      type: \"ADD\",\n      item: item\n    });\n  };\n  const removeItemFromCartHandler = id => {\n    dispatchCartAction({\n      type: \"REMOVE\",\n      id: id\n    });\n  };\n\n  // this is the value\n  const cartContext = {\n    items: cartState.items,\n    totalAmount: cartState.totalAmount,\n    // amount as in quantity not price\n    addItem: addItemToCarthandler,\n    removeItem: removeItemFromCartHandler\n  };\n  return /*#__PURE__*/_jsxDEV(CartContext.Provider, {\n    value: cartContext,\n    children: props.children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 98,\n    columnNumber: 5\n  }, this);\n};\n_s(CartProvider, \"PxEugEseoIJIbjFwtAJal5z5ClY=\");\n_c = CartProvider;\nexport default CartProvider;\nvar _c;\n$RefreshReg$(_c, \"CartProvider\");","map":{"version":3,"names":["React","useReducer","CartContext","jsxDEV","_jsxDEV","defaultCartState","items","totalAmount","CartProvider","props","_s","cartState","dispatchCartAction","cartreducer","addItemToCarthandler","item","type","removeItemFromCartHandler","id","cartContext","addItem","removeItem","Provider","value","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/prabeshparajuli/Desktop/Food_app/src/Store/CartProvider.js"],"sourcesContent":["import React, { useReducer } from \"react\";\nimport CartContext from \"./cart_context\";\n\nconst defaultCartState = {\n  items: [],\n  totalAmount: 0,\n};\n\n// const cartreducer = (state, action) => {\n//   switch (action.type) {\n//     case \"ADD\":\n//       const updatedTotalAmount =\n//         state.totalAmount + action.item.price * action.item.amount;\n//       const existingCartItemIndex = state.items.findIndex(\n//         (item) => item.id === action.item.id\n//       );\n\n//       if (existingCartItemIndex !== -1) {\n//         const existingAmount = parseInt(\n//           state.items[existingCartItemIndex].amount,\n//           10\n//         );\n//         const newAmount = parseInt(action.item.amount, 10);\n//         const updatedAmount = existingAmount + newAmount;\n\n//         // Update the item's amount with the new numeric value\n//         state.items[existingCartItemIndex].amount = updatedAmount;\n//       } else {\n//         // If it's a new item, simply add it to the items array\n//         state.items.push(action.item);\n//       }\n\n//       return {\n//         ...state,\n//         totalAmount: updatedTotalAmount,\n//       };\n\n//       case \"REMOVE\":\n//         const existingCartItemIndex = state.items.findIndex(\n//           (item) => item.id === action.id\n//         );\n        \n//         if (existingCartItemIndex === -1) {\n//           return state; // No item found, nothing to remove\n//         }\n  \n//         const existingItem = state.items[existingCartItemIndex];\n//         const updatedTotalAmount1 = state.totalAmount - existingItem.price;\n//         let updatedItems;\n//         if (existingItem.amount === 1) {\n//           updatedItems = state.items.filter(item => item.id !== action.id);\n//         } else {\n//           const updatedItem = { ...existingItem, amount: existingItem.amount - 1 };\n//           updatedItems = [...state.items];\n//           updatedItems[existingCartItemIndex] = updatedItem;\n//         }\n  \n//         return {\n//           items: updatedItems,\n//           totalAmount: updatedTotalAmount1,\n//         };\n  \n//       default:\n//         return state;\n//     }\n//   };\n\nconst CartProvider = (props) => {\n  const [cartState, dispatchCartAction] = useReducer(\n    cartreducer,\n    defaultCartState\n  );\n\n  const addItemToCarthandler = (item) => {\n    dispatchCartAction({\n      type: \"ADD\",\n      item: item,\n    });\n  };\n\n  const removeItemFromCartHandler = (id) => {\n    dispatchCartAction({\n      type: \"REMOVE\",\n\n      id: id,\n    });\n  };\n\n  // this is the value\n  const cartContext = {\n    items: cartState.items,\n    totalAmount: cartState.totalAmount, // amount as in quantity not price\n    addItem: addItemToCarthandler,\n    removeItem: removeItemFromCartHandler,\n  };\n\n  return (\n    <CartContext.Provider value={cartContext}>\n      {props.children}\n    </CartContext.Provider>\n  );\n};\n\nexport default CartProvider;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,UAAU,QAAQ,OAAO;AACzC,OAAOC,WAAW,MAAM,gBAAgB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEzC,MAAMC,gBAAgB,GAAG;EACvBC,KAAK,EAAE,EAAE;EACTC,WAAW,EAAE;AACf,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA,MAAMC,YAAY,GAAIC,KAAK,IAAK;EAAAC,EAAA;EAC9B,MAAM,CAACC,SAAS,EAAEC,kBAAkB,CAAC,GAAGX,UAAU,CAChDY,WAAW,EACXR,gBACF,CAAC;EAED,MAAMS,oBAAoB,GAAIC,IAAI,IAAK;IACrCH,kBAAkB,CAAC;MACjBI,IAAI,EAAE,KAAK;MACXD,IAAI,EAAEA;IACR,CAAC,CAAC;EACJ,CAAC;EAED,MAAME,yBAAyB,GAAIC,EAAE,IAAK;IACxCN,kBAAkB,CAAC;MACjBI,IAAI,EAAE,QAAQ;MAEdE,EAAE,EAAEA;IACN,CAAC,CAAC;EACJ,CAAC;;EAED;EACA,MAAMC,WAAW,GAAG;IAClBb,KAAK,EAAEK,SAAS,CAACL,KAAK;IACtBC,WAAW,EAAEI,SAAS,CAACJ,WAAW;IAAE;IACpCa,OAAO,EAAEN,oBAAoB;IAC7BO,UAAU,EAAEJ;EACd,CAAC;EAED,oBACEb,OAAA,CAACF,WAAW,CAACoB,QAAQ;IAACC,KAAK,EAAEJ,WAAY;IAAAK,QAAA,EACtCf,KAAK,CAACe;EAAQ;IAAAC,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACK,CAAC;AAE3B,CAAC;AAAClB,EAAA,CAlCIF,YAAY;AAAAqB,EAAA,GAAZrB,YAAY;AAoClB,eAAeA,YAAY;AAAC,IAAAqB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}