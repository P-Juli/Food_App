{"ast":null,"code":"var _jsxFileName = \"/Users/prabeshparajuli/Desktop/Food_app/src/Components/Meals/MealItem/MealItemForm.js\",\n  _s = $RefreshSig$();\nimport React, { useRef } from \"react\";\nimport \"./MealItemForm.css\";\nimport Input from \"../../UI/Input\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst MealItemForm = () => {\n  _s();\n  const amountInputRef = useRef();\n  const submitHandler = event => {\n    event.preventDefault();\n    const enteredAmount = amountInputRef.current.value;\n    console.log(\"hi i\");\n  };\n  return /*#__PURE__*/_jsxDEV(\"form\", {\n    className: \"form\",\n    onSubmit: submitHandler,\n    children: [/*#__PURE__*/_jsxDEV(Input, {\n      label: \"quantity\",\n      ref: amountInputRef,\n      input: {\n        id: \"amount\",\n        type: \"number\",\n        min: \"1\",\n        max: \"5\",\n        defaultValue: \"1\"\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 19,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      type: \"submit\",\n      children: \"+Add\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 18,\n    columnNumber: 5\n  }, this);\n};\n_s(MealItemForm, \"7cHUJdJWd3tefBlPVbYdC5gY/1U=\");\n_c = MealItemForm;\nexport default MealItemForm;\n\n/*\nSo, the use of colons (:) in the object you pass as a prop is just a way to define property-value pairs within an object, and when spread into the JSX, they are correctly interpreted as attributes with equal signs (=) as required in JSX. The conversion is handled by the JSX parser.\n<Input\n  input={{\n    id: \"amount\",\n    type: \"number\",\n    min: \"1\",\n    max: \"5\",\n    defaultValue: \"1\",\n  }}\n/>\nThe spread operator takes the properties from this object and sets them as attributes for the <input> element. In this case, it would result in:\n<input\n  id=\"amount\"\n  type=\"number\"\n  min=\"1\"\n  max=\"5\"\n  defaultValue=\"1\"\n/>\n*/\nvar _c;\n$RefreshReg$(_c, \"MealItemForm\");","map":{"version":3,"names":["React","useRef","Input","jsxDEV","_jsxDEV","MealItemForm","_s","amountInputRef","submitHandler","event","preventDefault","enteredAmount","current","value","console","log","className","onSubmit","children","label","ref","input","id","type","min","max","defaultValue","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/prabeshparajuli/Desktop/Food_app/src/Components/Meals/MealItem/MealItemForm.js"],"sourcesContent":["import React, { useRef } from \"react\";\nimport \"./MealItemForm.css\";\nimport Input from \"../../UI/Input\";\n\nconst MealItemForm = () => {\n\n\n  const amountInputRef = useRef();\n  const submitHandler = (event) => {\n    event.preventDefault();\n    const enteredAmount= amountInputRef.current.value\n    console.log(\"hi i\")\n  }\n  \n\n  return (\n\n    <form className=\"form\" onSubmit={submitHandler}>\n      <Input\n        label=\"quantity\"\n        ref={amountInputRef}\n        input={{\n          id: \"amount\",\n          type: \"number\",\n          min: \"1\",\n          max: \"5\",\n          defaultValue: \"1\",\n        }}\n      />\n      <button type=\"submit\">+Add</button>\n    </form>\n  );\n};\n\nexport default MealItemForm;\n\n/*\nSo, the use of colons (:) in the object you pass as a prop is just a way to define property-value pairs within an object, and when spread into the JSX, they are correctly interpreted as attributes with equal signs (=) as required in JSX. The conversion is handled by the JSX parser.\n<Input\n  input={{\n    id: \"amount\",\n    type: \"number\",\n    min: \"1\",\n    max: \"5\",\n    defaultValue: \"1\",\n  }}\n/>\nThe spread operator takes the properties from this object and sets them as attributes for the <input> element. In this case, it would result in:\n<input\n  id=\"amount\"\n  type=\"number\"\n  min=\"1\"\n  max=\"5\"\n  defaultValue=\"1\"\n/>\n*/"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,MAAM,QAAQ,OAAO;AACrC,OAAO,oBAAoB;AAC3B,OAAOC,KAAK,MAAM,gBAAgB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEnC,MAAMC,YAAY,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAGzB,MAAMC,cAAc,GAAGN,MAAM,CAAC,CAAC;EAC/B,MAAMO,aAAa,GAAIC,KAAK,IAAK;IAC/BA,KAAK,CAACC,cAAc,CAAC,CAAC;IACtB,MAAMC,aAAa,GAAEJ,cAAc,CAACK,OAAO,CAACC,KAAK;IACjDC,OAAO,CAACC,GAAG,CAAC,MAAM,CAAC;EACrB,CAAC;EAGD,oBAEEX,OAAA;IAAMY,SAAS,EAAC,MAAM;IAACC,QAAQ,EAAET,aAAc;IAAAU,QAAA,gBAC7Cd,OAAA,CAACF,KAAK;MACJiB,KAAK,EAAC,UAAU;MAChBC,GAAG,EAAEb,cAAe;MACpBc,KAAK,EAAE;QACLC,EAAE,EAAE,QAAQ;QACZC,IAAI,EAAE,QAAQ;QACdC,GAAG,EAAE,GAAG;QACRC,GAAG,EAAE,GAAG;QACRC,YAAY,EAAE;MAChB;IAAE;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACH,CAAC,eACF1B,OAAA;MAAQmB,IAAI,EAAC,QAAQ;MAAAL,QAAA,EAAC;IAAI;MAAAS,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAC/B,CAAC;AAEX,CAAC;AAACxB,EAAA,CA5BID,YAAY;AAAA0B,EAAA,GAAZ1B,YAAY;AA8BlB,eAAeA,YAAY;;AAE3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAnBA,IAAA0B,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}